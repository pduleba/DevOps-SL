def aws_region = ""
def aws_bucket = ""

def http_host = ""

def database_host = ""
def database_port = ""
def database_name = ""
def database_username = ""
def database_password = ""

pipeline {

    //-----------------------------------------
    // Declarative Pipeline Syntax Reference :: https://jenkins.io/doc/book/pipeline/syntax/#declarative-pipeline
    // Declarative Pipeline Steps Reference  :: https://jenkins.io/doc/pipeline/steps/
    //-----------------------------------------

    // default agent - docker container
    agent {
        docker {
            image "pduleba/blueocean-agent:latest"
            args '-v /D/docker/agent/.m2:$HOME/.m2'
        }
    }

    environment {
        // Access to AWS_ACCESS_KEY_ID & AWS_SECRET_ACCESS_KEY via "CloudBees AWS Credentials Plugin"
        AWS                 = credentials('aws-credentials')
        AWS_DEFAULT_REGION  = credentials('aws-default-region')
        AWS_DEFAULT_OUTPUT  = credentials('aws-default-output')

        EXEC_ROOT_PATH      = "util-IaaC"
        APP_ROOT_PATH       = "app-rest"
        BUILD_OUTPUT_PATH   = "${env.APP_ROOT_PATH}/target"
        // Following requires requires pipeline-utility-steps (https://wiki.jenkins.io/display/JENKINS/Pipeline+Utility+Steps+Plugin)
        ARTIFACT_ID         = readMavenPom(file: "${env.APP_ROOT_PATH}/pom.xml").getArtifactId()
        VERSION             = readMavenPom(file: "${env.APP_ROOT_PATH}/pom.xml").getVersion()
    }

    options {
        disableConcurrentBuilds()
    }

    parameters {
        choice choices: ['dev', 'test'], description: 'Target environment', name: 'TARGET_ENVIRONMENT'
        choice choices: ['aws', 'local'], description: 'Maven profile', name: 'MAVEN_PROFILE'
        choice choices: ['true', 'false'], description: 'Maven profile', name: 'DRY_RUN'
    }

    tools {
        "maven" "3.6.1"
    }

    stages {

        stage("SSM parameter store") {
            steps {
                dir("$ROOT_PATH") {
                    script {
                        aws_bucket = sh(returnStdout : true, script: "exec/ux/utils/get-parameter.sh s3/app-bucket ${params.TARGET_ENVIRONMENT}").trim()
                    }
                }
            }
        }

        stage("Configuration review") {
            steps {
                sh "echo AWS_ACCESS_KEY_ID      = $AWS_ACCESS_KEY_ID"
                sh "echo AWS_SECRET_ACCESS_KEY  = $AWS_SECRET_ACCESS_KEY"
                sh "echo AWS_DEFAULT_REGION     = $AWS_DEFAULT_REGION"
                sh "echo AWS_DEFAULT_OUTPUT     = $AWS_DEFAULT_OUTPUT"

                sh "echo EXEC_ROOT_PATH         = $EXEC_ROOT_PATH"
                sh "echo APP_ROOT_PATH          = $APP_ROOT_PATH"
                sh "echo BUILD_OUTPUT_PATH      = $BUILD_OUTPUT_PATH"
                sh "echo ARTIFACT_ID            = $ARTIFACT_ID"
                sh "echo VERSION                = $VERSION"

                sh "echo TARGET_ENVIRONMENT     = ${params.TARGET_ENVIRONMENT}"
                sh "echo MAVEN_PROFILE          = ${params.MAVEN_PROFILE}"
                sh "echo DRY_RUN                = ${params.DRY_RUN}"

                sh "mvn -B --version"
                sh "echo ${env.MAVEN_HOME}"
                sh "aws --version"

                sh "echo aws_bucket = ${aws_bucket}"
            }
        }

        stage("Maven clean") {
            steps {
                dir("$APP_ROOT_PATH") {
                    sh "mvn -B clean release:clean"
                }
            }
        }


        stage("Maven release") {
            steps {
                dir("$EXEC_ROOT_PATH") {
                    sh "mvn -B release:prepare release:perform -DdryRun=${params.DRY_RUN} -P${params.MAVEN_PROFILE}"
                }
            }
        }

        stage("Is release valid?") {
            steps {
                script {
                    try {
                        timeout(time: 5, unit: "MINUTES") {
                            input message: 'Is release valid?', ok: 'Yes'
                        }
                        echo "Release has been approved"
                    } catch (err) {
                        echo "Release has not been approved"
                        throw err
                    }
                }
            }
        }

        stage("CodeDeploy") {
            steps {
                dir("$BUILD_OUTPUT_PATH") {
                    sh "ls -alt"
                }
            }
        }
    }

    post {
        cleanup {
            sh "rm -rf $BUILD_OUTPUT_PATH"
        }
    }
}
