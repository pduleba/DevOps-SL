pipeline {

    //-----------------------------------------
    // Declarative Pipeline Syntax Reference :: https://jenkins.io/doc/book/pipeline/syntax/#declarative-pipeline
    // Declarative Pipeline Steps Reference  :: https://jenkins.io/doc/pipeline/steps/
    //-----------------------------------------

    // default agent - docker container
    agent {
        docker {
            image "pduleba/blueocean-agent:latest"
            args '-v /D/docker/agent/.m2:$HOME/.m2'
        }
    }

    // can not be updated - like final
    environment {
        // Access to AWS_ACCESS_KEY_ID & AWS_SECRET_ACCESS_KEY via "CloudBees AWS Credentials Plugin"
        AWS_CREDENTIALS_ID      = "aws-credentials"
        MVN_GLOBAL_SETTINGS_ID  = "global-maven-settings"

        AWS                     = credentials('aws-credentials')
        AWS_DEFAULT_REGION      = credentials('aws-default-region')
        AWS_DEFAULT_OUTPUT      = credentials('aws-default-output')

        ROOT_PATH               = "app-rest"
        TARGET_PATH             = "${env.ROOT_PATH}/target"

        def pom                 = readMavenPom(file: "${env.ROOT_PATH}/pom.xml")
        RELEASE_VERSION         = pom.getVersion().replace("-SNAPSHOT", "")
        ARTIFACT_ID             = pom.getArtifactId()
    }

    options {
        disableConcurrentBuilds()
    }

    parameters {
        choice choices: ['dev', 'test'], description: 'Target environment', name: 'TARGET_ENVIRONMENT'
        choice choices: ['aws', 'local'], description: 'Maven profile', name: 'MAVEN_PROFILE'
        booleanParam defaultValue: true, description: 'Release dry run', name: 'DRY_RUN'
    }

    tools {
        "maven" "3.6.1"
    }

    stages {

        stage("Configuration review") {
            steps {
                sh "echo AWS_ACCESS_KEY_ID      = ${env.AWS_ACCESS_KEY_ID}"
                sh "echo AWS_SECRET_ACCESS_KEY  = ${env.AWS_SECRET_ACCESS_KEY}"
                sh "echo AWS_DEFAULT_REGION     = ${env.AWS_DEFAULT_REGION}"
                sh "echo AWS_DEFAULT_OUTPUT     = ${env.AWS_DEFAULT_OUTPUT}"

                sh "echo ROOT_PATH              = ${env.ROOT_PATH}"
                sh "echo TARGET_PATH            = ${env.TARGET_PATH}"

                sh "echo ARTIFACT_ID            = ${env.ARTIFACT_ID}"
                sh "echo RELEASE_VERSION        = ${env.RELEASE_VERSION}"

                sh "echo TARGET_ENVIRONMENT     = ${params.TARGET_ENVIRONMENT}"
                sh "echo MAVEN_PROFILE          = ${params.MAVEN_PROFILE}"
                sh "echo DRY_RUN                = ${params.DRY_RUN}"

                // Plugin :: https://wiki.jenkins.io/display/JENKINS/AWS+Parameter+Store+Plugin
                withAWSParameterStore(credentialsId: "${env.AWS_CREDENTIALS_ID}",
                        path: "/pduleba/${params.TARGET_ENVIRONMENT}",
                        regionName: "${env.AWS_DEFAULT_REGION}",
                        naming: 'relative',
                        recursive: true) {

                    echo "MAVEN_PROFILE         = ${params.MAVEN_PROFILE}"

                    echo "AWS_REGION            = ${env.AWS_DEFAULT_REGION}"
                    echo "AWS_BUCKET            = ${env.APP_BUCKET}"

                    echo "HTTP_HOST             = ${env.HTTP_HOST}"

                    echo "DATABASE_HOST         = ${maskValue(env.DATABASE_NAME)}"
                    echo "DATABASE_PORT         = ${maskValue(env.DATABASE_PORT)}"
                    echo "DATABASE_NAME         = ${maskValue(env.DATABASE_NAME)}"
                    echo "DATABASE_USERNAME     = ${maskValue(env.DATABASE_USERNAME)}"
                    echo "DATABASE_PASSWORD     = ${maskValue(env.DATABASE_PASSWORD)}"
                }

                sh "mvn -B --version"
                sh "echo ${env.MAVEN_HOME}"
                sh "aws --version"
            }
        }

        stage("Maven clean") {
            steps {
                dir("${env.ROOT_PATH}") {
                    sh "mvn -B clean release:clean"
                }
            }
        }

        stage("Maven verify") {
            steps {
                dir("${env.ROOT_PATH}") {
                    sh "mvn -B clean test -P${params.MAVEN_PROFILE}"
                }
            }
        }

        stage("Maven release") {
            steps {
                dir("${env.ROOT_PATH}") {
                    withAWSParameterStore(credentialsId: "${env.AWS_CREDENTIALS_ID}",
                            path: "/pduleba/${params.TARGET_ENVIRONMENT}",
                            regionName: "${env.AWS_DEFAULT_REGION}",
                            naming: 'relative',
                            recursive: true) {

                        // Plugin :: https://wiki.jenkins.io/display/JENKINS/Config+File+Provider+Plugin
                        configFileProvider([configFile(fileId: "${env.MVN_GLOBAL_SETTINGS_ID}", variable: 'MAVEN_SETTINGS')]) {
                            sh "mvn -B clean release:clean"
                            sh "mvn -B release:prepare ${getReleaseArguments(false)}"
                            sh "mvn -B release:perform ${getReleaseArguments(true)}"
                        }
                    }
                }
            }
        }

        stage("Is release valid?") {
            steps {
                script {
                    try {
                        timeout(time: 5, unit: "MINUTES") {
                            input message: "Is release ${env.RELEASE_VERSION} valid?", ok: 'Yes'
                        }
                        echo "Release ${env.RELEASE_VERSION} has been approved"
                    } catch (err) {
                        echo "Release ${env.RELEASE_VERSION} has not been approved"
                        throw err
                    }
                }
            }
        }

        stage("CodeDeploy") {
            when {
                expression {
                    (
                            (currentBuild.result == null || currentBuild.result == 'SUCCESS')
                                    &&
                                    params.DRY_RUN == false
                    )
                }
            }
            steps {
                dir("$TARGET_PATH") {
                    sh "echo EXECUTE CODE DEPLOY"
                    sh "ls -alt"
                }
            }
        }
    }
}

def maskValue(String value) {
    return value?.trim() ? "****" : ""
}

String getReleaseArguments(boolean perform) {
    // Jenkins is blocking 'StringJoiner' in scripts
    StringBuilder innerArguments = new StringBuilder()
    innerArguments
            .append("-P${params.MAVEN_PROFILE}")
            .append(" ")
            .append("-DskipTests")

    if (perform) {
        innerArguments
                .append("-Dproject.aws.region=${env.AWS_DEFAULT_REGION}")
                .append(" ")
                .append("-Dproject.aws.bucket=${env.APP_BUCKET}")
                .append(" ")
                .append("-Dproject.http.host=${env.HTTP_HOST}")
                .append(" ")
                .append("-Dproject.database.host=${env.DATABASE_HOST}")
                .append(" ")
                .append("-Dproject.database.port=${env.DATABASE_PORT}")
                .append(" ")
                .append("-Dproject.database.name=${env.DATABASE_NAME}")
                .append(" ")
                .append("-Dproject.database.username=${env.DATABASE_USERNAME}")
                .append(" ")
                .append("-Dproject.database.password=${env.DATABASE_PASSWORD}")
    }

    StringBuilder arguments = new StringBuilder()
            .append("-DdryRun=${params.DRY_RUN}")
            .append(" ")
            .append("-s")
            .append(" ")
            .append("${env.MAVEN_SETTINGS}")
            .append(" ")
            .append("-Darguments=\"")
            .append(" ")
            .append(innerArguments.toString())
            .append(" ")
            .append("\"")

    return arguments.toString()
}