pipeline {

    //-----------------------------------------
    // Declarative Pipeline Syntax Reference :: https://jenkins.io/doc/book/pipeline/syntax/#declarative-pipeline
    // Declarative Pipeline Steps Reference  :: https://jenkins.io/doc/pipeline/steps/
    //-----------------------------------------

    // default agent - docker container
    agent {
        docker {
            image "pduleba/blueocean-agent:latest"
            args '-v /D/docker/agent/.m2:$HOME/.m2'
        }
    }

    environment {
        // Access to AWS_ACCESS_KEY_ID & AWS_SECRET_ACCESS_KEY via "CloudBees AWS Credentials Plugin"
        AWS_CREDENTIALS_ID      = "aws-credentials"
        GIT_CREDENTIALS_ID      = "git-credentials"

        AWS                     = credentials('aws-credentials')
        AWS_DEFAULT_REGION      = credentials('aws-default-region')
        AWS_DEFAULT_OUTPUT      = credentials('aws-default-output')

        ROOT_PATH               = "app-rest"
        POM_PATH                = "${env.ROOT_PATH}/pom.xml"
        TARGET_PATH             = "${env.ROOT_PATH}/target"

        // Depends on pipeline-utility-steps (https://wiki.jenkins.io/display/JENKINS/Pipeline+Utility+Steps+Plugin)
        def pom                 = readMavenPom(file: "${env.POM_PATH}")
        ARTIFACT_ID             = pom.getArtifactId()
        VERSION                 = pom.getVersion()
    }

    options {
        disableConcurrentBuilds()
    }

    parameters {
        choice choices: ['dev', 'test'], description: 'Target environment', name: 'TARGET_ENVIRONMENT'
        choice choices: ['aws', 'local'], description: 'Maven profile', name: 'MAVEN_PROFILE'
        booleanParam defaultValue: true, description: 'Release dry run', name: 'DRY_RUN'
    }

    tools {
        "maven" "3.6.1"
    }

    stages {

        stage("Configuration review") {
            steps {
                sh "echo AWS_ACCESS_KEY_ID      = ${env.AWS_ACCESS_KEY_ID}"
                sh "echo AWS_SECRET_ACCESS_KEY  = ${env.AWS_SECRET_ACCESS_KEY}"
                sh "echo AWS_DEFAULT_REGION     = ${env.AWS_DEFAULT_REGION}"
                sh "echo AWS_DEFAULT_OUTPUT     = ${env.AWS_DEFAULT_OUTPUT}"

                sh "echo ROOT_PATH              = ${env.ROOT_PATH}"
                sh "echo POM_PATH               = ${env.POM_PATH}"
                sh "echo TARGET_PATH            = ${env.TARGET_PATH}"

                sh "echo ARTIFACT_ID            = ${env.ARTIFACT_ID}"
                sh "echo VERSION                = ${env.VERSION}"

                sh "echo TARGET_ENVIRONMENT     = ${params.TARGET_ENVIRONMENT}"
                sh "echo MAVEN_PROFILE          = ${params.MAVEN_PROFILE}"
                sh "echo DRY_RUN                = ${params.DRY_RUN}"

                withAWSParameterStore(credentialsId: "${env.AWS_CREDENTIALS_ID}",
                        path: "/pduleba/${params.TARGET_ENVIRONMENT}",
                        regionName: "${env.AWS_DEFAULT_REGION}",
                        naming: 'relative',
                        recursive: true) {

                    echo "MAVEN_PROFILE         = ${params.MAVEN_PROFILE}"

                    echo "AWS_REGION            = ${env.AWS_DEFAULT_REGION}"
                    echo "AWS_BUCKET            = ${env.APP_BUCKET}"

                    echo "HTTP_HOST             = ${env.HTTP_HOST}"

                    script {
                        echo "DATABASE_HOST         = ${maskValue(env.DATABASE_NAME)}"
                        echo "DATABASE_PORT         = ${maskValue(env.DATABASE_PORT)}"
                        echo "DATABASE_NAME         = ${maskValue(env.DATABASE_NAME)}"
                        echo "DATABASE_USERNAME     = ${maskValue(env.DATABASE_USERNAME)}"
                        echo "DATABASE_PASSWORD     = ${maskValue(env.DATABASE_PASSWORD)}"
                    }
                }

                sh "mvn -B --version"
                sh "echo ${env.MAVEN_HOME}"
                sh "aws --version"
            }
        }

        stage("Maven clean") {
            steps {
                dir("$ROOT_PATH") {
                    sh "mvn -B clean release:clean"
                }
            }
        }

        stage("Maven verify") {
            steps {
                dir("$ROOT_PATH") {
                    sh "mvn -B clean test -P${params.MAVEN_PROFILE}"
                }
            }
        }

        stage("Maven release") {
            steps {
                dir("$ROOT_PATH") {
                    withAWSParameterStore(credentialsId: "${env.AWS_CREDENTIALS_ID}",
                            path: "/pduleba/${params.TARGET_ENVIRONMENT}",
                            regionName: "${env.AWS_DEFAULT_REGION}",
                            naming: 'relative',
                            recursive: true) {

                        script {
                            sh "mvn -B release:clean"
                            sh "mvn -B release:prepare ${getReleaseParameters()}"

                            def pom         = readMavenPom()
                            env.ARTIFACT_ID = pom.getArtifactId()
                            env.VERSION     = pom.getVersion()

                            sh "mvn -B release:perform ${getReleaseParameters()}"
                        }
                    }
                }
            }
        }

        stage("Is release valid?") {
            steps {
                script {
                    try {
                        timeout(time: 5, unit: "MINUTES") {
                            input message: "Is release ${env.VERSION} valid?", ok: 'Yes'
                        }
                        echo "Release ${env.VERSION} has been approved"
                    } catch (err) {
                        echo "Release ${env.VERSION} has not been approved"
                        throw err
                    }
                }
            }
        }

        stage("CodeDeploy") {
            when {
                expression {
                    (
                        (currentBuild.result == null || currentBuild.result == 'SUCCESS')
                            &&
                        params.DRY_RUN
                    )
                }
            }
            steps {
                dir("$TARGET_PATH") {
                    sh "echo EXECUTE CODE DEPLOY"
                    sh "ls -alt"
                }
            }
        }
    }

    post {
        cleanup {
            sh "rm -rf $TARGET_PATH"
        }
    }
}

def maskValue(String value) {
    return value?.trim() ? "****" : ""
}

def getReleaseParameters() {
    return "-DdryRun=${params.DRY_RUN} " +
            "-Darguments=\"-DskipTests\" " +
            "-P${params.MAVEN_PROFILE} " +
            "-Dproject.aws.region=${env.AWS_DEFAULT_REGION} " +
            "-Dproject.aws.bucket=${env.APP_BUCKET} " +
            "-Dproject.http.host=${env.HTTP_HOST} " +
            "-Dproject.database.host=${env.DATABASE_HOST} " +
            "-Dproject.database.port=${env.DATABASE_PORT} " +
            "-Dproject.database.name=${env.DATABASE_NAME} " +
            "-Dproject.database.username=${env.DATABASE_USERNAME} " +
            "-Dproject.database.password=${env.DATABASE_PASSWORD}"
}