pipeline {

    //-----------------------------------------
    // Declarative Pipeline Syntax Reference :: https://jenkins.io/doc/book/pipeline/syntax/#declarative-pipeline
    // Declarative Pipeline Steps Reference  :: https://jenkins.io/doc/pipeline/steps/
    //-----------------------------------------

    // default agent - docker container
    agent {
        docker {
            image "pduleba/blueocean-agent:latest"
        }
    }

    environment {
        // Access to AWS_ACCESS_KEY_ID & AWS_SECRET_ACCESS_KEY via "CloudBees AWS Credentials Plugin"
        AWS                 = credentials('aws-credentials')
        AWS_DEFAULT_REGION  = credentials('aws-default-region')
        AWS_DEFAULT_OUTPUT  = credentials('aws-default-output')

        ROOT_PATH           = "util-IaaC"
        MODULE_PATH         = "${env.ROOT_PATH}/modules/${params.TERRAFORM_MODULE}"
        BUILD_OUTPUT_PATH   = "${env.MODULE_PATH}/out/${params.TARGET_ENVIRONMENT}/${params.TERRAFORM_MODULE}"
    }

    options {
        disableConcurrentBuilds()
    }

    parameters {
        choice choices: ['backend', 'bastion', 'infrastructure', 'network', 'storage'], description: 'Target Terraform module', name: 'TERRAFORM_MODULE'
        choice choices: ['dev', 'test'], description: 'Target environment', name: 'TARGET_ENVIRONMENT'
        choice choices: ['create', 'destroy'], description: 'Execution mode', name: 'EXECUTION_MODE'
    }

    tools {
        "org.jenkinsci.plugins.terraform.TerraformInstallation" "2.8.0"
    }

    stages {
        stage("Configuration review") {
            steps {
                sh "echo AWS_ACCESS_KEY_ID      = $AWS_ACCESS_KEY_ID"
                sh "echo AWS_SECRET_ACCESS_KEY  = $AWS_SECRET_ACCESS_KEY"
                sh "echo AWS_DEFAULT_REGION     = $AWS_DEFAULT_REGION"
                sh "echo AWS_DEFAULT_OUTPUT     = $AWS_DEFAULT_OUTPUT"

                sh "echo ROOT_PATH              = $ROOT_PATH"
                sh "echo MODULE_PATH            = $MODULE_PATH"
                sh "echo BUILD_OUTPUT_PATH      = $BUILD_OUTPUT_PATH"

                sh "echo TERRAFORM_MODULE       = ${params.TERRAFORM_MODULE}"
                sh "echo TARGET_ENVIRONMENT     = ${params.TARGET_ENVIRONMENT}"
                sh "echo EXECUTION_MODE         = ${params.EXECUTION_MODE}"

                sh "terraform --version"
                sh "aws --version"
            }
        }

        stage("Terraform init") {
            steps {
                dir("$ROOT_PATH") {
                    sh "exec/ux/init.sh ${params.TERRAFORM_MODULE} ${params.TARGET_ENVIRONMENT}"
                }
            }
        }

        stage("Terraform refresh backend") {
            when {
                expression { params.TERRAFORM_MODULE == 'backend' }
            }
            steps {
                dir("$ROOT_PATH") {
                    sh "exec/ux/refresh.sh ${params.TERRAFORM_MODULE} ${params.TARGET_ENVIRONMENT}"
                }
            }
        }

        stage("Terraform plan") {
            failFast true
            parallel {
                stage("Create") {
                    when {
                        expression { params.EXECUTION_MODE == 'create' }
                    }
                    steps {
                        dir("$ROOT_PATH") {
                            sh "exec/ux/apply-plan.sh ${params.TERRAFORM_MODULE} ${params.TARGET_ENVIRONMENT}"
                        }
                    }
                }
                stage("Destroy") {
                    when {
                        expression { params.EXECUTION_MODE == 'destroy' }
                    }
                    steps {
                        dir("$ROOT_PATH") {
                            sh "exec/ux/destroy-plan.sh ${params.TERRAFORM_MODULE} ${params.TARGET_ENVIRONMENT}"
                        }
                    }
                }
            }
        }

        stage("Is plan valid?") {
            steps {
                script {
                    try {
                        timeout(time: 1, unit: "MINUTES") {
                            input message: 'Is plan valid?', ok: 'Yes'
                        }
                        echo "Plan has been approved"
                    } catch (err) {
                        echo "Plan has not been approved"
                        throw err
                    }
                }
            }
        }

        stage("Terraform apply") {
            failFast true
            parallel {
                stage("Create") {
                    when {
                        expression { params.EXECUTION_MODE == 'create' }
                    }
                    steps {
                        dir("$ROOT_PATH") {
                            sh "exec/ux/apply.sh ${params.TERRAFORM_MODULE} ${params.TARGET_ENVIRONMENT}"
                        }
                    }
                }
                stage("Destroy") {
                    when {
                        expression { params.EXECUTION_MODE == 'destroy' }
                    }
                    steps {
                        dir("$ROOT_PATH") {
                            sh "exec/ux/destroy.sh ${params.TERRAFORM_MODULE} ${params.TARGET_ENVIRONMENT}"
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            archiveArtifacts artifacts: "$BUILD_OUTPUT_PATH/*.tfplan",
                    allowEmptyArchive: true,
                    caseSensitive: false,
                    fingerprint: true
        }
        cleanup {
            sh "rm -rf $BUILD_OUTPUT_PATH/*.tfplan"
        }
    }
}
